{"version":3,"sources":["components/Persons.js","App.js","serviceWorker.js","index.js"],"names":["Persons","props","className","name","onClick","click","type","OneChange","changed","age","App","state","persons","id","showPersons","buttonValue","togglePersonsHandler","doesShow","setState","deletePersonsHandler","indexPerson","slice","splice","person","this","map","index","key","event","nameChangeHandler","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAkBeA,G,YAfC,SAAAC,GACd,OACE,yBAAKC,UAAU,OACb,yCACCD,EAAME,KACP,uBAAGC,QAASH,EAAMI,OAAlB,MACA,6BACA,2BAAOC,KAAK,OAAOC,UAAWN,EAAMO,UACpC,6BACA,0CACCP,EAAMQ,OCiEEC,E,2MAxEbC,MAAQ,CACNC,QAAS,CACP,CAAEC,GAAI,IAAKV,KAAM,YAAaM,IAAK,IACnC,CAAEI,GAAI,IAAKV,KAAM,WAAYM,IAAK,IAClC,CAAEI,GAAI,IAAKV,KAAM,UAAWM,IAAK,IACjC,CAAEI,GAAI,IAAKV,KAAM,aAAWM,IAAK,IACjC,CAAEI,GAAI,IAAKV,KAAM,OAAQM,IAAK,QAEhCK,aAAa,EACbC,YAAa,U,EAoBfC,qBAAuB,WACrB,IAAMC,EAAW,EAAKN,MAAMG,YAC5B,EAAKI,SAAS,CAAEJ,aAAcG,K,EAGhCE,qBAAuB,SAAAC,GACrB,IAAMR,EAAU,EAAKD,MAAMC,QAAQS,QACnCT,EAAQU,OAAOF,EAAa,GAC5B,EAAKF,SAAS,CAAEN,QAASA,K,wEAGjB,IAAD,OACHW,EAAS,KAoBb,OAnBIC,KAAKb,MAAMG,cACbS,EACE,6BACGC,KAAKb,MAAMC,QAAQa,KAAI,SAACF,EAAQG,GAC/B,OACE,kBAAC,EAAD,CACEvB,KAAMoB,EAAOpB,KACbM,IAAKc,EAAOd,IACZJ,MAAO,kBAAM,EAAKc,qBAAqBO,IACvCC,IAAKJ,EAAOV,GACZL,QAAS,SAAAoB,GAAK,OAAI,EAAKC,kBAAkBD,EAAOL,EAAOV,YAUjE,yBAAKX,UAAU,OACb,4BAAQE,QAASoB,KAAKR,qBAAsBd,UAAU,UACnDsB,KAAKb,MAAMI,aAEbQ,O,GAnESO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1e3d22ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Persons.css\";\r\n\r\nconst Persons = props => {\r\n  return (\r\n    <div className=\"box\">\r\n      <label>Nome: </label>\r\n      {props.name}\r\n      <b onClick={props.click}> X</b>\r\n      <br />\r\n      <input type=\"text\" OneChange={props.changed} />\r\n      <br />\r\n      <label> Eta': </label>\r\n      {props.age}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Persons from \"./components/Persons\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: \"1\", name: \"Francesco\", age: 22 },\n      { id: \"2\", name: \"Lucrezia\", age: 23 },\n      { id: \"3\", name: \"Rebecca\", age: 21 },\n      { id: \"4\", name: \"NiccolÃ²\", age: 23 },\n      { id: \"5\", name: \"Test\", age: \"xyz\" }\n    ],\n    showPersons: false,\n    buttonValue: \"Mostra\"\n  };\n\n  // nameChangeHandler = (event, id) => {\n  //   const personIndex = this.state.persons.findIndex(p => {\n  //     return p.id === id;\n  //   });\n\n  // const person = {\n  //   ...this.state.persons[personIndex]\n  // };\n\n  // person.name = event.target.value;\n\n  // // const persons = [...this.state.persons];\n  // // persons[personIndex] = person;\n\n  //   // this.setState({ person: person });\n  // };\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  };\n\n  deletePersonsHandler = indexPerson => {\n    const persons = this.state.persons.slice();\n    persons.splice(indexPerson, 1);\n    this.setState({ persons: persons });\n  };\n\n  render() {\n    let person = null;\n    if (this.state.showPersons) {\n      person = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return (\n              <Persons\n                name={person.name}\n                age={person.age}\n                click={() => this.deletePersonsHandler(index)}\n                key={person.id}\n                changed={event => this.nameChangeHandler(event, person.id)}\n              />\n            );\n          })}\n          {/* chiusura map() */}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <button onClick={this.togglePersonsHandler} className=\"button\">\n          {this.state.buttonValue}\n        </button>\n        {person}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}